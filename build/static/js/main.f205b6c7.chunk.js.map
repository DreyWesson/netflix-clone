{"version":3,"sources":["axios.js","requests.js","components/Banner.js","utils.js","components/Nav.js","components/Row.js","App.js","reportWebVitals.js","actions/actionTypes.js","reducers/scrollReducer.js","reducers/rootReducer.js","index.js"],"names":["instance","axios","create","baseURL","REACT_APP_APIKEY","process","fetchData","key","fetchParam","a","get","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","useState","movie","setMovie","useQuery","staleTime","data","status","console","log","useEffect","results","Math","random","length","className","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","src","alt","Row","fetchUrl","isLargeRow","baseUrl","setBaseUrl","movies","setMovies","trailerUrl","setTrailerUrl","height","width","playerVars","autoplay","opts","setOpts","videoId","map","onClick","movieName","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","err","confirm","handleClick","poster_path","id","App","initialIsOpen","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","actionTypes","initialState","hideOnScroll","scrollReducer","state","action","type","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f205b6c7.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;\n","import axios from \"./axios\";\nconst { REACT_APP_APIKEY } = process.env;\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${REACT_APP_APIKEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${REACT_APP_APIKEY}&with_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${REACT_APP_APIKEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${REACT_APP_APIKEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${REACT_APP_APIKEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${REACT_APP_APIKEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${REACT_APP_APIKEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${REACT_APP_APIKEY}&with_genres=99`,\n};\nexport async function fetchData(key, fetchParam) {\n  return await axios.get(fetchParam);\n}\nexport default requests;\n","import \"./Banner.css\";\nimport React, { useEffect, useState } from \"react\";\nimport requests, { fetchData } from \"../requests\";\nimport { useQuery } from \"react-query\";\nimport { truncate } from \"../utils\";\n\nconst Banner = () => {\n  const [movie, setMovie] = useState([]);\n  const { fetchNetflixOriginals } = requests;\n\n  // useQuery implementation for asynchronous data\n  const { data, status } = useQuery(\n    [\"fetchData\", fetchNetflixOriginals],\n    fetchData,\n    { staleTime: 24 * 60 * 60 }\n  );\n\n  console.log(\"FETCH DATA STATUS ðŸ‘‰ \", status);\n  console.log(\"FETCH DATA ðŸ‘‰ \", data);\n\n  useEffect(\n    () =>\n      setMovie(\n        data?.data.results[(Math.random() * data.data.results.length - 1) | 0]\n      ),\n    [data]\n  );\n\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(https://image.tmdb.org/t/p/original/${movie?.backdrop_path})`,\n        backgroundPosition: \"top center\",\n      }}\n    >\n      <div className=\"banner__contents\">\n        <h1 className=\"banner__title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n        <div className=\"banner__buttons\">\n          <button className=\"banner__button\">Play</button>\n          <button className=\"banner__button\">My List</button>\n        </div>\n        <h1 className=\"banner__description\">\n          {truncate(movie?.overview, 150)}\n        </h1>\n      </div>\n      <div className=\"banner__fadeBottom\" />\n    </header>\n  );\n};\n\nexport default Banner;\n","export function truncate(str, n) {\n  return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n}\n","import \"./Nav.css\";\nimport React, { useEffect, useState } from \"react\";\n\nconst Nav = () => {\n  const [show, handleShow] = useState(false);\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      window.scrollY > 100 ? handleShow(true) : handleShow(false);\n      return () => window.removeEventListener(\"scroll\");\n    });\n  }, []);\n  return (\n    <div className={`nav ${show && \"nav__black\"}`}>\n      <img\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1280px-Netflix_2015_logo.svg.png\"\n        className=\"nav__logo\"\n        alt=\"netflix logo\"\n      />\n      <img\n        className=\"nav__avatar\"\n        src=\"https://mir-s3-cdn-cf.behance.net/project_modules/disp/366be133850498.56ba69ac36858.png\"\n        alt=\"\"\n      />\n    </div>\n  );\n};\n\nexport default Nav;\n","import React, { useEffect, useState } from \"react\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nimport { useQuery } from \"react-query\";\nimport { fetchData } from \"../requests\";\n\nconst Row = ({ title, fetchUrl, isLargeRow }) => {\n  const [baseUrl, setBaseUrl] = useState(\n      \"https://image.tmdb.org/t/p/original/\"\n    ),\n    [movies, setMovies] = useState([]),\n    [trailerUrl, setTrailerUrl] = useState(\"\"),\n    [opts, setOpts] = useState({\n      height: \"390\",\n      width: \"100%\",\n      playerVars: {\n        autoplay: 1,\n      },\n    });\n\n  // useQuery implementation for asynchronous data\n  const { data, status } = useQuery([\"fetchUrl\", fetchUrl], fetchData, {\n    staleTime: 24 * 60 * 60,\n  });\n\n  console.log(`Fetch ${fetchUrl} URL STATUS ðŸ‘‰ , ${status}`);\n  console.log(\"Fetch URL ðŸ‘‰ \", data);\n  useEffect(() => setMovies(data?.data.results), [data]);\n  useEffect(() => {\n    setOpts({\n      height: \"390\",\n      width: \"100%\",\n      playerVars: {\n        autoplay: 1,\n      },\n    });\n    setBaseUrl(\"https://image.tmdb.org/t/p/original/\");\n  }, []);\n\n  const handleClick = (movie) => {\n    if (trailerUrl) setTrailerUrl(\"\");\n    else {\n      let movieName = movie?.name || \"\";\n      movieTrailer(movieName)\n        .then((url) => {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get(\"v\"));\n        })\n        .catch((err) => {\n          const confirmation = window.confirm(\n            \"Oops, no trailer for this movie as of now!. Watch random trailer\"\n          );\n          let movieName = [\n            \"Star wars\",\n            \"Ocean Eleven\",\n            \"The Crown and the Dragon\",\n            \"Dark Phoenix\",\n          ];\n          confirmation &&\n            movieTrailer(\n              movieName[(Math.random() * movieName.length) | 0]\n            ).then((url) => {\n              const urlParams = new URLSearchParams(new URL(url).search);\n              setTrailerUrl(urlParams.get(\"v\"));\n            });\n        });\n    }\n  };\n  console.log(trailerUrl);\n  return (\n    <div className=\"row\">\n      <h2 className=\"row__title\">{title}</h2>\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n\n      <div className=\"row__posters\">\n        {movies?.map((movie) => {\n          return (\n            <img\n              key={movie?.id}\n              onClick={() => handleClick(movie)}\n              className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n              src={`${baseUrl}${\n                isLargeRow ? movie.poster_path : movie.backdrop_path\n              }`}\n              alt={movie.name}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Row;\n","import { ReactQueryDevtools } from \"react-query-devtools\";\nimport \"./App.css\";\nimport Banner from \"./components/Banner\";\nimport Nav from \"./components/Nav\";\nimport Row from \"./components/Row\";\nimport requests from \"./requests\";\n\nfunction App() {\n  return (\n    <>\n      <div className=\"app\">\n        <Nav />\n        <Banner />\n        <Row\n          title=\"NETFLIX ORIGINALS\"\n          fetchUrl={requests.fetchNetflixOriginals}\n          isLargeRow\n        />\n        <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n        <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n        <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n        <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n        <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n        <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n        <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n      </div>\n      <ReactQueryDevtools initialIsOpen={false} />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const actionTypes = {\n  SET_SCROLL: \"SET_SCROLL\",\n};\n","import { actionTypes } from \"../actions/actionTypes\";\n\nexport const initialState = {\n  hideOnScroll: null,\n};\n\nconst scrollReducer = (state = initialState, action) => {\n  console.log(\"ðŸ’ªScroll ActionðŸ’ª \", action);\n  switch (action.type) {\n    case actionTypes.SET_SCROLL:\n      return {\n        ...state,\n        hideOnScroll: action.hideOnScroll,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default scrollReducer;\n","import { combineReducers } from \"redux\";\nimport scrollReducer from \"./scrollReducer\";\nconst rootReducer = combineReducers({ scrollReducer });\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers/rootReducer\";\nimport { Provider } from \"react-redux\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\nconsole.log(\"ðŸ‘‡List of Reducers Stored in STATE ðŸ‘‡\", store.getState());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}